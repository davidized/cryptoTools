(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 8.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[     25794,        800]
NotebookOptionsPosition[     22836,        698]
NotebookOutlinePosition[     23256,        714]
CellTagsIndexPosition[     23213,        711]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["cryptoTools", "Title",
 CellChangeTimes->{{3.572403323718165*^9, 3.572403325387368*^9}}],

Cell["\<\
by David Williamson <david@davidized.com>\
\>", "Author",
 CellChangeTimes->{{3.5724035148341007`*^9, 3.5724035253641195`*^9}}],

Cell[CellGroupData[{

Cell["Analysis", "Section",
 CellChangeTimes->{{3.5728808263448796`*^9, 3.5728808273120813`*^9}}],

Cell[CellGroupData[{

Cell["Frequency Analysis", "Subsection",
 CellChangeTimes->{{3.57240333222018*^9, 3.5724033438578005`*^9}}],

Cell[CellGroupData[{

Cell["freqAnalysis[cryptoText]", "Subsubsection",
 CellChangeTimes->{{3.57240334908381*^9, 3.5724033548558197`*^9}}],

Cell[TextData[{
 "Used to generate a grid containing counts and percents for characters in \
the given text. The function does not perform any transform on the string so \
it may be wise to convert it to upper or lowercase first using a function \
like ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"ToUpperCase", "[", "]"}], "Code"], TraditionalForm]]],
 " or ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"ToLowerCase", "[", "]"}], "Code"], TraditionalForm]]],
 ". This function only works on the letters in strings."
}], "Text",
 CellChangeTimes->{{3.572403364637037*^9, 3.5724034926508617`*^9}, {
  3.572404916704363*^9, 3.572404944238412*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"freqAnalysis", "[", "cryptoText_", "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"chars", ",", " ", "counts"}], "}"}], ",", 
     RowBox[{
      RowBox[{"chars", "=", 
       RowBox[{"Sort", "[", 
        RowBox[{"DeleteDuplicates", "[", 
         RowBox[{"StringCases", "[", 
          RowBox[{"cryptoText", ",", 
           RowBox[{"_", "?", "LetterQ"}]}], "]"}], "]"}], "]"}]}], ";", 
      RowBox[{"{", 
       RowBox[{"chars", ",", " ", 
        RowBox[{"counts", "=", 
         RowBox[{"ParallelTable", "[", 
          RowBox[{
           RowBox[{"StringCount", "[", 
            RowBox[{"cryptoText", ",", "l"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"l", ",", "chars"}], "}"}]}], "]"}]}], ",", " ", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"N", "[", 
           RowBox[{
            RowBox[{"i", "/", 
             RowBox[{"Total", "[", "counts", "]"}]}], ",", "2"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "counts"}], "}"}]}], "]"}]}], "}"}]}]}], "]"}], 
   " ", "//", "TableForm"}]}]], "Input",
 CellChangeTimes->{{3.5724036262036963`*^9, 3.5724036981198225`*^9}, {
   3.572403728555476*^9, 3.572403826196048*^9}, {3.572403873604531*^9, 
   3.5724039409966493`*^9}, {3.5724039860963287`*^9, 3.5724039865019293`*^9}, 
   3.572818015705804*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["freqAnalysisNum[cryptoText]", "Subsubsection",
 CellChangeTimes->{{3.5724049070479465`*^9, 3.5724049134751577`*^9}}],

Cell[TextData[{
 "Similar to ",
 StyleBox["freqAnalysis[]", "Code"],
 " except only operates on a string consisting of numbers."
}], "Text",
 CellChangeTimes->{{3.572404955316431*^9, 3.5724049726480618`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"freqAnalysisNum", "[", "cryptoText_", "]"}], ":=", 
  RowBox[{
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"nums", ",", "counts"}], "}"}], ",", " ", 
     RowBox[{
      RowBox[{"nums", "=", 
       RowBox[{"Sort", "[", 
        RowBox[{"DeleteDuplicates", "[", 
         RowBox[{"StringCases", "[", 
          RowBox[{"cryptoText", ",", " ", 
           RowBox[{"_", "?", "DigitQ"}]}], "]"}], "]"}], "]"}]}], ";", " ", 
      RowBox[{"{", 
       RowBox[{"nums", ",", " ", 
        RowBox[{"counts", "=", " ", 
         RowBox[{"ParallelTable", "[", 
          RowBox[{
           RowBox[{"StringCount", "[", 
            RowBox[{"cryptoText", ",", "n"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"n", ",", "nums"}], "}"}]}], "]"}]}], ",", " ", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"N", "[", 
           RowBox[{
            RowBox[{"i", "/", 
             RowBox[{"Total", "[", "counts", "]"}]}], ",", "2"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "counts"}], "}"}]}], "]"}]}], "}"}]}]}], "]"}], 
   " ", "//", "TableForm"}]}]], "Input",
 CellChangeTimes->{{3.572404327814929*^9, 3.572404377376216*^9}, {
  3.572404519632866*^9, 3.5724045250928755`*^9}, {3.572404610989626*^9, 
  3.5724047432788587`*^9}, {3.572404789985341*^9, 3.572404808908174*^9}, {
  3.5724048398742285`*^9, 3.5724048415434313`*^9}, {3.572818005674986*^9, 
  3.5728180212438135`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Index of Coincidence", "Subsection",
 CellChangeTimes->{{3.572880973173338*^9, 3.572880975731742*^9}}],

Cell[CellGroupData[{

Cell["kappaIC", "Subsubsection",
 CellChangeTimes->{{3.572881124104603*^9, 3.5728811795471*^9}, {
  3.5728812803710775`*^9, 3.5728812846922846`*^9}}],

Cell[TextData[{
 StyleBox["kappaIC[text, shift, c]", "Code"],
 " looks at actual coincidences when shifting a given ",
 StyleBox["text", "Input"],
 " against itself. The ",
 StyleBox["kappICTable[text, maxShifts, c]", "Code"],
 " produces the output in TableForm and ",
 StyleBox["kappaICPlot[text, maxShifts, c]", "Code"],
 " produces a bar graph. ",
 StyleBox["c", "Input"],
 " represents the number of characters in the alphabet which the text is made \
up of."
}], "Text",
 CellChangeTimes->{{3.572881576882798*^9, 3.572881615882867*^9}, {
  3.5728816507645283`*^9, 3.572881742055888*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"kappaIC", "[", 
   RowBox[{"text_", ",", "shift_", ",", 
    RowBox[{"c_:", "26"}]}], "]"}], ":=", " ", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"textL", "=", 
       RowBox[{"Select", "[", 
        RowBox[{
         RowBox[{"Characters", "[", 
          RowBox[{"ToUpperCase", "[", "text", "]"}], "]"}], ",", "LetterQ"}], 
        "]"}]}], "}"}], ",", 
     RowBox[{"Divide", "[", 
      RowBox[{
       RowBox[{"Sum", "[", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"textL", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "\[Equal]", 
            RowBox[{
             RowBox[{"RotateRight", "[", 
              RowBox[{"textL", ",", "shift"}], "]"}], "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], ",", " ", "1", ",", " ", "0"}],
           "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", 
           RowBox[{"Length", "[", "textL", "]"}]}], "}"}]}], "]"}], ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "textL", "]"}], "/", "c"}], ")"}]}], "]"}]}], 
    "]"}], " ", "//", "N"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"kappaICTable", "[", 
   RowBox[{"text_", ",", " ", "maxShifts_", ",", " ", 
    RowBox[{"c_:", " ", "26"}]}], "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"ParallelTable", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"shift", ",", " ", 
       RowBox[{"kappaIC", "[", 
        RowBox[{"text", ",", " ", "shift", ",", " ", "c"}], "]"}]}], "}"}], 
     ",", " ", 
     RowBox[{"{", 
      RowBox[{"shift", ",", " ", "1", ",", " ", "maxShifts"}], "}"}]}], "]"}],
    " ", "//", " ", "TableForm"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"kappaICPlot", "[", 
   RowBox[{"text_", ",", "maxShifts_", ",", 
    RowBox[{"c_:", "26"}]}], "]"}], ":=", 
  RowBox[{"BarChart", "[", 
   RowBox[{
    RowBox[{"ParallelTable", "[", 
     RowBox[{
      RowBox[{"kappaIC", "[", 
       RowBox[{"text", ",", "shift", ",", "c"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"shift", ",", "1", ",", "maxShifts"}], "}"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ChartLabels", "\[Rule]", 
       RowBox[{"Placed", "[", 
        RowBox[{
         RowBox[{"Range", "[", 
          RowBox[{"1", ",", "maxShifts"}], "]"}], ",", "Below"}], "]"}]}], 
      ",", 
      RowBox[{"AxesLabel", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<Shift\>\"", ",", "\"\<kappaIC\>\""}], "}"}]}]}], "}"}]}],
    "]"}]}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["deltaIC", "Subsubsection",
 CellChangeTimes->{{3.5728812967823057`*^9, 3.5728812977183075`*^9}}],

Cell[TextData[{
 StyleBox["deltaIC[text, c]", "Code"],
 " uses letter frequencies to calculate an Index of Coincidence value. "
}], "Text",
 CellChangeTimes->{{3.5728817960943832`*^9, 3.5728818241744328`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"deltaIC", "[", 
   RowBox[{"text_", ",", 
    RowBox[{"c_:", "26"}], ",", 
    RowBox[{"letters_:", 
     RowBox[{"CharacterRange", "[", 
      RowBox[{"\"\<a\>\"", ",", "\"\<z\>\""}], "]"}]}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"textL", "=", 
       RowBox[{"Select", "[", 
        RowBox[{
         RowBox[{"Characters", "[", 
          RowBox[{"ToLowerCase", "[", "text", "]"}], "]"}], ",", "LetterQ"}], 
        "]"}]}], "}"}], ",", 
     RowBox[{"Divide", "[", 
      RowBox[{
       RowBox[{"Sum", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Count", "[", 
           RowBox[{"textL", ",", 
            RowBox[{"numToLetter", "[", 
             RowBox[{"l", ",", "letters"}], "]"}]}], "]"}], "*", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Count", "[", 
             RowBox[{"textL", ",", 
              RowBox[{"numToLetter", "[", 
               RowBox[{"l", ",", "letters"}], "]"}]}], "]"}], "-", "1"}], 
           ")"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"l", ",", "1", ",", "c"}], "}"}]}], "]"}], ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Length", "[", "textL", "]"}], "*", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Length", "[", "textL", "]"}], "-", "1"}], ")"}]}], 
          ")"}], "/", "c"}], ")"}]}], "]"}]}], "]"}], " ", "//", 
   "N"}]}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["deltaBarIC", "Subsubsection",
 CellChangeTimes->{{3.5728813037867184`*^9, 3.5728813062827225`*^9}}],

Cell[TextData[{
 StyleBox["deltaBarIC[text, keyLength, c, letters] ", "Code"],
 "uses ",
 StyleBox["keyLength", "Input"],
 " to split the text and then calculates the average ",
 StyleBox["deltaIC", "Code"],
 " for each character of the key. This is useful when attempting to determine \
key length as we should see significantly higher values for lengths which are \
multiples of the acutal key length.\nThe ",
 StyleBox["deltaBarICTable[text, maxKeyLength, c, letters]", "Code"],
 " and ",
 StyleBox["deltaBarICPlot[text, maxKeyLength, c, letters]", "Code"],
 " produce tables and bar graphs, respectively, of ",
 StyleBox["deltaBarIC", "Code"],
 " values."
}], "Text",
 CellChangeTimes->{{3.572881882830536*^9, 3.572882014654767*^9}, {
  3.572882053670436*^9, 3.5728821032357235`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"deltaBarIC", "[", 
   RowBox[{"text_", ",", "keyLength_", ",", 
    RowBox[{"c_:", "26"}], ",", 
    RowBox[{"letters_:", 
     RowBox[{"CharacterRange", "[", 
      RowBox[{"\"\<a\>\"", ",", "\"\<z\>\""}], "]"}]}]}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"textM", "=", 
      RowBox[{"Partition", "[", 
       RowBox[{
        RowBox[{"Select", "[", 
         RowBox[{
          RowBox[{"Characters", "[", 
           RowBox[{"ToLowerCase", "[", "text", "]"}], "]"}], ",", "LetterQ"}],
          "]"}], ",", "keyLength"}], "]"}]}], "}"}], ",", 
    RowBox[{"Mean", "[", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"deltaIC", "[", 
        RowBox[{
         RowBox[{"StringJoin", "[", 
          RowBox[{"textM", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "k"}], "]"}], "]"}], "]"}], ",", "c", ",", 
         "letters"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"k", ",", "1", ",", "keyLength"}], "}"}]}], "]"}], "]"}]}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"deltaBarICTable", "[", 
   RowBox[{"text_", ",", "maxKeyLength_", ",", 
    RowBox[{"c_:", "26"}], ",", 
    RowBox[{"letters_:", 
     RowBox[{"CharacterRange", "[", 
      RowBox[{"\"\<a\>\"", ",", "\"\<z\>\""}], "]"}]}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"ParallelTable", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"keyLength", ",", 
       RowBox[{"deltaBarIC", "[", 
        RowBox[{"text", ",", "keyLength", ",", "c", ",", "letters"}], "]"}]}],
       "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"keyLength", ",", "1", ",", "maxKeyLength"}], "}"}]}], "]"}], 
   " ", "//", "TableForm"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"deltaBarICPlot", "[", 
   RowBox[{"text_", ",", "maxKeyLength_", ",", 
    RowBox[{"c_:", "26"}], ",", 
    RowBox[{"letters_:", 
     RowBox[{"CharacterRange", "[", 
      RowBox[{"\"\<a\>\"", ",", "\"\<z\>\""}], "]"}]}]}], "]"}], ":=", 
  RowBox[{"BarChart", "[", 
   RowBox[{
    RowBox[{"ParallelTable", "[", 
     RowBox[{
      RowBox[{"deltaBarIC", "[", 
       RowBox[{"text", ",", "keyLength", ",", "c", ",", "letters"}], "]"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"keyLength", ",", " ", "1", ",", "maxKeyLength"}], "}"}]}], 
     "]"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ChartLabels", "\[Rule]", 
       RowBox[{"Placed", "[", 
        RowBox[{
         RowBox[{"Range", "[", 
          RowBox[{"1", ",", "maxKeyLength"}], "]"}], ",", "Below"}], "]"}]}], 
      ",", 
      RowBox[{"AxesLabel", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<Key Length\>\"", ",", "\"\<deltaBarIC\>\""}], "}"}]}]}], 
     "}"}]}], "]"}]}]], "Input"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Cipher Systems", "Section",
 CellChangeTimes->{{3.5728808378732996`*^9, 3.572880856718133*^9}}],

Cell[CellGroupData[{

Cell["Caesar Shift", "Subsection",
 CellChangeTimes->{{3.5728244427016964`*^9, 3.572824450985311*^9}}],

Cell[CellGroupData[{

Cell["caesarShiftE[plainText, shift]", "Subsubsection",
 CellChangeTimes->{{3.5728244685841417`*^9, 3.5728244796289616`*^9}}],

Cell[TextData[{
 "Encrypts ",
 StyleBox["plainText", "Input"],
 " using a Caesar Shift of ",
 StyleBox["shift", "Input"],
 ". Uses ",
 StyleBox["shiftString", "Code"],
 " and produces an uppercase string."
}], "Text",
 CellChangeTimes->{{3.5728245851485467`*^9, 3.5728246043989806`*^9}, {
  3.5728247113527684`*^9, 3.5728247373268137`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"caesarShiftE", "[", 
   RowBox[{"plainText_", ",", " ", "shift_"}], "]"}], ":=", 
  RowBox[{"ToUpperCase", "[", 
   RowBox[{"shiftString", "[", 
    RowBox[{"plainText", ",", "shift"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5728213731755033`*^9, 3.572821415077177*^9}, {
  3.5728218549521494`*^9, 3.5728218605375595`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["caesarShiftD[cipherText, shift]", "Subsubsection",
 CellChangeTimes->{{3.5728244685841417`*^9, 3.5728244796289616`*^9}, {
  3.5728246105297914`*^9, 3.5728246134313965`*^9}}],

Cell[TextData[{
 "Decrypts ",
 StyleBox["cipherText", "Input"],
 " using a Caesar Shift of ",
 StyleBox["shift", "Input"],
 " (this function automatically handles creating a negative shift). Uses ",
 StyleBox["shiftString", "Code"],
 " and produces a lowercase string."
}], "Text",
 CellChangeTimes->{{3.5728245851485467`*^9, 3.5728246607306795`*^9}, {
  3.572824751476039*^9, 3.5728247590888524`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"caesarShiftD", "[", 
   RowBox[{"cipherText_", ",", " ", "shift_"}], "]"}], ":=", 
  RowBox[{"ToLowerCase", "[", 
   RowBox[{"shiftString", "[", 
    RowBox[{"cipherText", ",", 
     RowBox[{"-", "shift"}]}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.572821437322816*^9, 3.5728214593344545`*^9}, {
  3.572821840865325*^9, 3.572821849070939*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["SImple Substitution", "Subsection",
 CellChangeTimes->{{3.5728247959391174`*^9, 3.5728248089963403`*^9}}],

Cell[CellGroupData[{

Cell["simpleSubE[plainText, cipherKey, ignoreCase, plainKey]", "Subsubsection",
 CellChangeTimes->{{3.572824824190767*^9, 3.5728248365615883`*^9}}],

Cell[TextData[{
 "Encrypts ",
 StyleBox["plainText", "Input"],
 " using ",
 StyleBox["cipherKey", "Input"],
 ". Setting ",
 StyleBox["ignoreCase", "Input"],
 " to False will make the ",
 StyleBox["cipherKey", "Input"],
 " and ",
 StyleBox["plainKey", "Input"],
 " case sensitive.  The substitution rules are built in the form ",
 StyleBox["plainKey ", "Code"],
 "\[Rule]",
 StyleBox[" cipherKey", "Code"],
 ". ",
 StyleBox["plainKey", "Input"],
 " defaults to a lowercase a-z alphabet but can be changed if something else \
is desired (although I don\[CloseCurlyQuote]t really have a scenario in mind \
as of the initial writing)."
}], "Text",
 CellChangeTimes->{{3.572824847824808*^9, 3.5728249863530517`*^9}, {
  3.5728250720440025`*^9, 3.5728250839156227`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"simpleSubE", "[", 
   RowBox[{"plainText_", ",", "cipherKey_", ",", 
    RowBox[{"ignoreCase_:", "True"}], ",", " ", 
    RowBox[{"plainKey_:", "\"\<abcdefghijklmnopqrstuvwxyz\>\""}]}], "]"}], ":=", 
  RowBox[{"StringReplace", "[", 
   RowBox[{"plainText", ",", 
    RowBox[{"Inner", "[", 
     RowBox[{"Rule", ",", 
      RowBox[{"Characters", "[", "plainKey", "]"}], ",", 
      RowBox[{"Characters", "[", "cipherKey", "]"}], ",", "List"}], "]"}], 
    ",", 
    RowBox[{"IgnoreCase", "\[Rule]", "ignoreCase"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.572823418871297*^9, 3.5728234230365047`*^9}, {
  3.5728235048118477`*^9, 3.572823525497484*^9}, {3.5728235668843575`*^9, 
  3.5728236435584917`*^9}, {3.57282368811217*^9, 3.5728237293430424`*^9}, {
  3.5728240461328*^9, 3.5728240509376082`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["simpleSubD[cipherText, cipherKey, ignoreCase, plainKey]", \
"Subsubsection",
 CellChangeTimes->{{3.572824824190767*^9, 3.5728248365615883`*^9}, {
  3.572824995089067*^9, 3.5728250077406893`*^9}}],

Cell[TextData[{
 "Reverses ",
 StyleBox["simpleSubE", "Code"],
 " on ",
 StyleBox["cipherText", "Input"],
 "."
}], "Text",
 CellChangeTimes->{{3.572824847824808*^9, 3.5728250145891013`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"simpleSubD", "[", 
   RowBox[{"cipherText_", ",", "cipherKey_", ",", 
    RowBox[{"ignoreCase_:", "True"}], ",", " ", 
    RowBox[{"plainKey_:", "\"\<abcdefghijklmnopqrstuvwxyz\>\""}]}], "]"}], ":=", 
  RowBox[{"StringReplace", "[", 
   RowBox[{"cipherText", ",", 
    RowBox[{"Inner", "[", 
     RowBox[{"Rule", ",", 
      RowBox[{"Characters", "[", "cipherKey", "]"}], ",", 
      RowBox[{"Characters", "[", "plainKey", "]"}], ",", "List"}], "]"}], ",", 
    RowBox[{"IgnoreCase", "\[Rule]", "ignoreCase"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.572823418871297*^9, 3.5728234230365047`*^9}, {
  3.5728235048118477`*^9, 3.572823525497484*^9}, {3.5728235668843575`*^9, 
  3.5728236435584917`*^9}, {3.57282368811217*^9, 3.5728237293430424`*^9}, {
  3.5728240461328*^9, 3.5728240509376082`*^9}, {3.572824090265277*^9, 
  3.5728241097029114`*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Utility Functions", "Section",
 CellChangeTimes->{{3.572880863566545*^9, 3.572880865875349*^9}}],

Cell[CellGroupData[{

Cell["numToLetter[num, letters]", "Subsection",
 CellChangeTimes->{{3.5728813540822067`*^9, 3.5728813595422163`*^9}}],

Cell["\<\
Converts a given number (num) to letters based on the list found in letters. \
This function makes it easier to generate tables when it\[CloseCurlyQuote]s \
necessary to list through all the letters in the alphabet.\
\>", "Text",
 CellChangeTimes->{{3.5728814915194483`*^9, 3.572881564433976*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"numToLetter", "[", 
   RowBox[{"num_", ",", 
    RowBox[{"letters_:", 
     RowBox[{"CharacterRange", "[", 
      RowBox[{"\"\<a\>\"", ",", "\"\<z\>\""}], "]"}]}]}], "]"}], ":=", 
  RowBox[{"letters", "[", 
   RowBox[{"[", "num", "]"}], "]"}]}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["shiftChar[c, shift]", "Subsection",
 CellChangeTimes->{{3.5728243356235085`*^9, 3.572824364389959*^9}}],

Cell[TextData[{
 "Shifts given character ",
 StyleBox["c", "Input"],
 " according to ",
 StyleBox["shift", "Input"],
 " (may be positive or negative). "
}], "Text",
 CellChangeTimes->{{3.5728243722367725`*^9, 3.5728243944044113`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"shiftChar", "[", 
   RowBox[{"c_", ",", " ", "shift_"}], "]"}], " ", ":=", 
  RowBox[{"FromCharacterCode", "[", 
   RowBox[{
    RowBox[{"Mod", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ToCharacterCode", "[", "c", "]"}], "-", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"UpperCaseQ", "[", "c", "]"}], ",", "65", ",", "97"}], "]"}],
        "+", "shift"}], ",", "26"}], "]"}], "+", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"UpperCaseQ", "[", "c", "]"}], ",", "65", ",", "97"}], "]"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.572818263489239*^9, 3.5728183186695366`*^9}, {
  3.572818390649063*^9, 3.5728183993850784`*^9}, {3.5728185508321447`*^9, 
  3.5728186544787264`*^9}, {3.572819029959786*^9, 3.572819080441475*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["shiftString[text, shift]", "Subsection",
 CellChangeTimes->{{3.572824489066978*^9, 3.572824494152587*^9}}],

Cell[TextData[{
 "Shifts a string (",
 StyleBox["text", "Input"],
 ") according to ",
 StyleBox["shift", "Input"],
 " (postitive or negative) using ",
 StyleBox["shiftChar", "Code"],
 "."
}], "Text",
 CellChangeTimes->{{3.5728245018434005`*^9, 3.5728245222170362`*^9}, {
  3.572824560717904*^9, 3.572824570562521*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"shiftString", "[", 
   RowBox[{"text_", ",", " ", "shift_"}], "]"}], ":=", 
  RowBox[{"StringJoin", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"LetterQ", "[", "c", "]"}], ",", 
       RowBox[{"shiftChar", "[", 
        RowBox[{"c", ",", " ", "shift"}], "]"}], ",", "c"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"c", ",", 
       RowBox[{"Characters", "[", "text", "]"}]}], "}"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.5728213318510303`*^9, 3.5728213583554773`*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{707, 505},
WindowMargins->{{46, Automatic}, {57, Automatic}},
FrontEndVersion->"8.0 for Microsoft Windows (32-bit) (October 6, 2011)",
StyleDefinitions->FrontEnd`FileName[{"Report"}, "StandardReport.nb", 
  CharacterEncoding -> "WindowsANSI"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 94, 1, 81, "Title"],
Cell[676, 25, 137, 3, 41, "Author"],
Cell[CellGroupData[{
Cell[838, 32, 97, 1, 73, "Section"],
Cell[CellGroupData[{
Cell[960, 37, 107, 1, 24, "Subsection"],
Cell[CellGroupData[{
Cell[1092, 42, 116, 1, 23, "Subsubsection"],
Cell[1211, 45, 664, 17, 65, "Text"],
Cell[1878, 64, 1422, 36, 121, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3337, 105, 122, 1, 23, "Subsubsection"],
Cell[3462, 108, 208, 5, 29, "Text"],
Cell[3673, 115, 1495, 37, 121, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[5217, 158, 108, 1, 24, "Subsection"],
Cell[CellGroupData[{
Cell[5350, 163, 149, 2, 23, "Subsubsection"],
Cell[5502, 167, 593, 14, 67, "Text"],
Cell[6098, 183, 1202, 35, 101, "Input"],
Cell[7303, 220, 549, 15, 81, "Input"],
Cell[7855, 237, 823, 24, 101, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8715, 266, 102, 1, 23, "Subsubsection"],
Cell[8820, 269, 209, 4, 29, "Text"],
Cell[9032, 275, 1511, 45, 121, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10580, 325, 105, 1, 23, "Subsubsection"],
Cell[10688, 328, 788, 17, 102, "Text"],
Cell[11479, 347, 1074, 31, 121, "Input"],
Cell[12556, 380, 655, 18, 101, "Input"],
Cell[13214, 400, 1015, 29, 141, "Input"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[14290, 436, 101, 1, 73, "Section"],
Cell[CellGroupData[{
Cell[14416, 441, 102, 1, 24, "Subsection"],
Cell[CellGroupData[{
Cell[14543, 446, 125, 1, 23, "Subsubsection"],
Cell[14671, 449, 340, 10, 30, "Text"],
Cell[15014, 461, 367, 8, 40, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15418, 474, 179, 2, 23, "Subsubsection"],
Cell[15600, 478, 402, 10, 48, "Text"],
Cell[16005, 490, 386, 9, 61, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[16440, 505, 111, 1, 24, "Subsection"],
Cell[CellGroupData[{
Cell[16576, 510, 147, 1, 23, "Subsubsection"],
Cell[16726, 513, 764, 22, 85, "Text"],
Cell[17493, 537, 837, 17, 101, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[18367, 559, 201, 3, 23, "Subsubsection"],
Cell[18571, 564, 190, 7, 30, "Text"],
Cell[18764, 573, 885, 17, 121, "Input"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[19710, 597, 102, 1, 73, "Section"],
Cell[CellGroupData[{
Cell[19837, 602, 117, 1, 24, "Subsection"],
Cell[19957, 605, 307, 5, 47, "Text"],
Cell[20267, 612, 290, 8, 40, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[20594, 625, 109, 1, 24, "Subsection"],
Cell[20706, 628, 234, 7, 30, "Text"],
Cell[20943, 637, 800, 20, 81, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[21780, 662, 112, 1, 24, "Subsection"],
Cell[21895, 665, 318, 10, 30, "Text"],
Cell[22216, 677, 580, 16, 61, "Input"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
